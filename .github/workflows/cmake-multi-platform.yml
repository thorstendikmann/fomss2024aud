name: CMake Multi Platform Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install boost
      run: sudo apt-get install -y libboost-all-dev
      if: matrix.os == 'ubuntu-latest'
    - name: Install Google Test
      run: sudo apt-get install -y googletest libgtest-dev
      if: matrix.os == 'ubuntu-latest'
    - name: Install Doxygen
      run: sudo apt-get install -y doxygen graphviz
      if: matrix.os == 'ubuntu-latest'
    - name: Install Valgrind / GDB / cppcheck
      run: sudo apt-get install -y valgrind gdb cppcheck
      if: matrix.os == 'ubuntu-latest'

    - name: Configure CMake - ubuntu-latest
      if: matrix.os == 'ubuntu-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -DWITH_BOOST=ON -DWITH_GTEST=ON -DWITH_DOC=ON
    - name: Configure CMake - other
      if: matrix.os != 'ubuntu-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: for i in $(ls -1 test); do test/$i; done

    - name: Packag Linux Deb
      if: matrix.os == 'ubuntu-latest'
      run: cpack -G "DEB" -B ${{ steps.strings.outputs.build-output-dir }}

    - name: Packag Linux
      if: matrix.os == 'ubuntu-latest'
      run: cpack -B ${{ steps.strings.outputs.build-output-dir }}

    - name: Packag Win Zip
      if: matrix.os == 'windows-latest'
      run: cpack -G "ZIP" -B ${{ steps.strings.outputs.build-output-dir }}
